version: "3.9"

x-app-base: &app-base
  build:
    context: .
    dockerfile: app.Dockerfile
  image: spd-app:latest
  env_file: .env
  volumes:
    - ./:/app
  working_dir: /app

services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: streaming-pipeline-zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.7
    container_name: streaming-pipeline-kafka
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka:9092 --list >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres:
    image: postgres:16
    container_name: streaming-pipeline-postgres
    environment:
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo
      POSTGRES_DB: demo
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo -d demo"]
      interval: 5s
      timeout: 5s
      retries: 10

  producer:
    <<: *app-base
    container_name: streaming-pipeline-producer
    command: python -u producer.py
    env_file: .env
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: clicks
    depends_on:
      kafka:
        condition: service_healthy

  consumer:
    <<: *app-base
    container_name: streaming-pipeline-consumer
    command: python -u consumer.py
    env_file: .env
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: clicks
      PG_HOST: postgres
      PG_PORT: "5432"
      PG_DB: demo
      PG_USER: demo
      PG_PASS: demo
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  streamlit:
    <<: *app-base
    container_name: streaming-pipeline-streamlit
    command: streamlit run app.py --server.port=8501 --server.address=0.0.0.0
    env_file: .env
    environment:
      PG_HOST: postgres
      PG_PORT: "5432"
      PG_DB: demo
      PG_USER: demo
      PG_PASS: demo
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8501:8501"
